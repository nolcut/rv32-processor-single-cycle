// with beq
lw x1, 0(x0) // get input 1
lw x2, 4(x0) // get input 2
beq x2, x4, 16 // branch to end of program if counter == x2
add x3, x3, x1 // add x1 to sum
addi x4, x4, 1 // iterate counter
beq x0, x0, -12 // unconditional jump back to start of for loop
00000000000000000010000010000011
00000000010000000010000100000011
00000000010000010000100001100011
00000000000100011000000110110011
00000000000100100000001000010011
11111110000000000000101011100011


// with bne
lw x1, 0(x0) // get input 1
lw x2, 4(x0) // get input 2
beq x1, x0, 16 // branch to end of program if first input is 0
add x3, x3, x1 // add x1 to sum
addi x4, x4, 1 // iterate counter
bne x4, x2, -8 // jump back to start of loop if counter != input 2
00000000000000000010000010000011
00000000010000000010000100000011
00000000000000001000100001100011
00000000000100011000000110110011
00000000000100100000001000010011
11111110001000100001110011100011


// with blt
lw x1, 0(x0) // get input 1
lw x2, 4(x0) // get input 2
beq x1, x0, 16 // branch to end of program if first input is 0
add x3, x3, x1 // add x1 to sum
addi x4, x4, 1 // iterate counter
blt x4, x2, -8 // jump back to start of loop if counter < input 2
00000000000000000010000010000011
00000000010000000010000100000011
00000000000000001000100001100011
00000000000100011000000110110011
00000000000100100000001000010011
11111110001000100100110011100011


// with bge
lw x1, 0(x0) // get input 1
lw x2, 4(x0) // get input 2
addi x2, x2, -1 // subtract 1 from input 2
beq x1, x0, 16 // branch to end of program if first input is 0
add x3, x3, x1 // add x1 to sum
addi x4, x4, 1 // iterate counter
bge x2, x4, -8 // jump back to start of loop if input 1 - 1 >= counter
00000000000000000010000010000011
00000000010000000010000100000011
11111111111100010000000100010011
00000000000000001000100001100011
00000000000100011000000110110011
00000000000100100000001000010011
11111110010000010101110011100011


// with JAL
lw x1, 0(x0) // get input 1
lw x2, 4(x0) // get input 2
beq x2, x4, 16 // branch to end of program if counter == x2
add x3, x3, x1 // add x1 to sum
addi x4, x4, 1 // iterate counter
jal x5, -12 // jump back to start of loop
00000000000000000010000010000011
00000000010000000010000100000011
00000000010000010000100001100011
00000000000100011000000110110011
00000000000100100000001000010011
11111111010111111111001011101111


// with JALR
lw x1, 0(x0) // get input 1
lw x2, 4(x0) // get input 2
addi x6, x0, 12 // set register to -12 (for jalr)
beq x2, x4, 16 // branch to end of program if counter == x2
add x3, x3, x1 // add x1 to sum
addi x4, x4, 1 // iterate counter
jalr x5, 0(x6) // jump back to start of loop
00000000000000000010000010000011
00000000010000000010000100000011
00000000110000000000001100010011
00000000010000010000100001100011
00000000000100011000000110110011
00000000000100100000001000010011
00000000000000110000001011100111




